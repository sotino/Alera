/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package be.sotino.entity;

/**
 *
 * @author g34771
 */
public class Exploitant extends Contructor {

    private static final int COLON_MAX = 5;
    private static final Ressource EXPLOITANT_PRICE = new Ressource(10, 50, 0);
    private static final Ressource COLON_PRICE = new Ressource(0, 50, 0);
    private Ressource playerRessource;
    private short exploitationLvl;
    private int goldColon;
    private int woodColon;
    private int meetColon;

    public Exploitant(Ressource playerRessource) {
        super(10);
        this.playerRessource = playerRessource;
        exploitationLvl = 0;
        goldColon = 0;
        woodColon = 0;
        meetColon = 0;
    }

    public short getExploitationLvl() {
        return exploitationLvl;
    }

    public int getGoldColon() {
        return goldColon;
    }

    public int getWoodColon() {
        return woodColon;
    }

    public int getMeetColon() {
        return meetColon;
    }

    public boolean isIsInstalled() {
        return exploitationLvl == 0;
    }

    public void buyColon() {
        if (!isFullCollon()) {
            if (playerRessource.pay(COLON_PRICE)) {
                goldColon++;
            }
        }
    }

    public void sellColon() {
        if (goldColon > 0) {
            playerRessource.sell(COLON_PRICE);
            goldColon--;
        }
    }

    public void affectCollonToWood() {
        if (goldColon > 0) {
            goldColon--;
            woodColon++;
        }
    }

    public void affectCollonToMeet() {
        if (goldColon > 0) {
            goldColon--;
            meetColon++;
        }
    }

    public void deaffectCollonToWood() {
        if (woodColon > 0) {
            woodColon--;
            goldColon++;
        }
    }

    public void deaffectCollonToMeet() {
        if (meetColon > 0) {
            meetColon--;
            goldColon++;
        }
    }

    public void upgradeExploitation() {
        Ressource price = getPriceNextLvl();
        if (price != null) {
            if (playerRessource.pay(price)) {
                statConstruction(getTimeNextLvl());
            }
        }
    }

    public void refreshFromDelta(long delta) {
        if (!isConstructing()) {
            double seconde = delta / 1000.0;
            double wood = (1 * woodColon) * seconde;
            double gold = (1 * goldColon) * seconde;
            double meet = (1 * meetColon) * seconde;
            playerRessource.add(new Ressource(wood, meet, gold));
        } else {
            if (finishConstruction(delta)) {
                exploitationLvl++;
            }
        }
    }

    public static Ressource getPrice() {
        return EXPLOITANT_PRICE;
    }

    public Ressource getPriceNextLvl() {
        if (exploitationLvl == 0) {
            return new Ressource(100, 25, 0);
        } else if (exploitationLvl == 1) {
            return new Ressource(250, 60, 50);
        } else if (exploitationLvl == 2) {
            return new Ressource(600, 300, 200);
        } else if (exploitationLvl == 3) {
            return new Ressource(1300, 550, 450);
        }
        return new Ressource(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
    }

    private int getTimeNextLvl() {
        if (exploitationLvl == 0) {
            return 5000;
        } else if (exploitationLvl == 1) {
            return 30000;
        } else if (exploitationLvl == 2) {
            return 70000;
        } else if (exploitationLvl == 3) {
            return 16000;
        }
        return Integer.MAX_VALUE;
    }

    private boolean isFullCollon() {
        int nbColon = goldColon + woodColon + meetColon;
        int max;
        if (exploitationLvl == 1) {
            max = COLON_MAX;
        } else {
            max = COLON_MAX * (int) (exploitationLvl * exploitationLvl) / 2;
        }
        return nbColon >= max;
    }

    @Override
    public int getWorker() {
        return goldColon + woodColon + meetColon;
    }
}
